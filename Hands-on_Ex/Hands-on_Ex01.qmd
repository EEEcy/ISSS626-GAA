---
title: "Hands-on Exercise 1"

author: "EEEcy"

---

# Getting Started

## Install and launch R Packages

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## import the data

```{r}
mpsz <- st_read(dsn = "D:/EEEcy/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Importing polyline feature data in shapefile form

```{R}
mpsz <- st_read(dsn = "D:/EEEcy/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", 
                layer = "CyclingPathGazette")
```

Importing GIS data in kml format

```{R}
preschool = st_read("D:/EEEcy/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml")
```

Working with st_geometry()

```{R}
st_geometry(mpsz)
```

Working with st_geometry()

```{R}
glimpse(mpsz)
```

Working with head()

```{R}
head(mpsz, n=5)  
```

Plotting the Geospatial Data

```{R}
plot(mpsz) 
```

Working with Projection

```{R}
st_crs(mpsz)  
```

```{R}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{R}
st_crs(mpsz3414)
```

```{R}
preschool3414 <- st_transform(preschool, 
                              crs = 3414) 
```

Importing the aspatial data

```{R}
listings <- read_csv("Hands-on_Ex01/data/aspatial/listings.csv")
```

```{R}
list(listings) 
```

Creating a simple feature data frame from an aspatial data frame

```{R}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{R}
glimpse(listings_sf)
```

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

```{R}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
```

```{R}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{R}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# Part 2

```{R}
pacman::p_load(sf, tmap, tidyverse)
```
Importing Geospatial Data into R
```{R}
mpsz <- st_read(dsn = "Hands-on_Ex01/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```
```{R}
mpsz
```
Importing Attribute Data into R
```{R}
popdata <- read_csv("Hands-on_Ex01/data/aspatial/respopagesextod2011to2020.csv")
```
Data Preparation
Data wrangling
```{R}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

```{R}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{R}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{R}
write_rds(mpsz_pop2020, "Hands-on_Ex01/data/rds/mpszpop2020.rds")
```
Plotting a choropleth map quickly by using qtm()
```{R}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```
Creating a choropleth map by using tmapâ€™s elements
```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
Drawing a base map
```{R}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```
Drawing a choropleth map using tm_polygons()
```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

```{R}
summary(mpsz_pop2020$DEPENDENCY)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```
Colour Scheme
```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```
Map Layouts
```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{R}
tmap_style("white")
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{R}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

```{R}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

```{R}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```